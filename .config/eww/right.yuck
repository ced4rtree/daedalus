; variables
(defvar brightness_value "80") ; this is updated by a script

(defpoll battery :interval "1m"
         "cat /sys/class/power_supply/BAT*/capacity")

(defvar volume "50")

(deflisten date_string "scripts/date")

(defvar date_format false) ; false is shorthand, true is longhand

;; Widgets
(defwidget metric [label value onchange]
           (box :orientation "h"
                :class "metric"
                :space-evenly false
                (box :class "label" label)
                (scale :min 0
                       :max 101
                       :active {onchange != ""}
                       :value value
                       :onchange onchange)))

(defwidget brightness []
           (label  :text "🔆 ${brightness_value}%    "
                   :justify "center"
                   :xalign 0.5
                   :class "brightness"))

(defwidget memory []
           (label  :text "💾 ${round(EWW_RAM.used_mem_perc, 0)}%"
                   :limit-width 9
                   :justify "center"
                   :show-truncated false
                   :xalign 0.5
                   :class "ram"))

(defwidget cpu []
           (label  :text "💻 ${round(EWW_CPU.avg, 0)}%"
                   :limit-width 8
                   :justfy "center"
                   :show-truncated false
                   :xalign 0.5
                   :class "cpu"))

(defwidget sound []
           (metric :label "🔊"
                   :value volume
                   :onchange "amixer sset Master {}%"))

(defwidget date []
           (button
            :onclick "scripts/change-date"
            :class "time"
            "🕜 ${date_string}"))

(defwidget temp []
           (box
            :class "temp"
            (label :text "🌡️")
            (label
             :text {round (EWW_TEMPS["CORETEMP_CORE_0"] / 4 +
                           EWW_TEMPS["CORETEMP_CORE_1"] / 4 +
                           EWW_TEMPS["CORETEMP_CORE_2"] / 4 +
                           EWW_TEMPS["CORETEMP_CORE_3"] / 4
                           , 0)}
             :xalign 1)
            (label :text "°"
                   :xalign 0)))

(defwidget battery []
           (label  :text "🔋${battery}%  "
                   :class "battery"))

;; The main widget
(defwidget right []
           (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
                (brightness)
                (memory)
                (cpu)
                (sound)
                (temp)
                (battery)
                (date)))
